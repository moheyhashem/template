apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'kotlin-android-extensions'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.template.testing.OpenClass'
}
android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "com.template"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.template.presentation.util.GithubTestRunner"
        multiDexEnabled true

    }
    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
    kapt {
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 500)
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.0'
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation deps.ktx.core_ktx
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.navigation.navigation_fragment
    implementation deps.navigation.runtime
    implementation deps.navigation.ui
    implementation deps.room.runtime
    implementation deps.room.rxjava2
    implementation deps.room.testing
    implementation deps.rxjava2
    implementation deps.rx_android
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    implementation deps.workmanager.runtime
    implementation deps.workmanager.rxjava2
    implementation deps.workmanager.testing
    implementation deps.rxjava2
    implementation deps.rx_android

    implementation deps.retrofit.runtime
    implementation deps.retrofit.adapter
    implementation deps.retrofit.gson
    implementation deps.okhttp_logging_interceptor
    implementation deps.glide.runtime
    implementation deps.ktx.core_ktx
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    implementation deps.paging.runtime
    implementation deps.paging.rxjava2
    implementation deps.constraint_layout
    implementation deps.kotlin.stdlib
    implementation deps.timber
    implementation deps.facebook
    implementation deps.gms
    implementation deps.firebase.core
    implementation deps.firebase.messaging
    implementation deps.viewpager_indicator
    implementation deps.arch_core.runtime

    kapt deps.room.compiler
    kapt deps.lifecycle.compiler
    kapt deps.dagger.compiler
   // annotationProcessor deps.dagger.compiler
    kapt deps.dagger.android_processor
    kapt deps.glide.compiler

    testImplementation deps.junit
    testImplementation deps.mock_web_server
    testImplementation deps.mockito.core
    testImplementation deps.hamcrest

    // Core library
    androidTestImplementation deps.testing.test_core
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation deps.testing.test_runner
    androidTestImplementation deps.testing.test_rules

    // Assertions
    androidTestImplementation deps.testing.test_ext_junit
    androidTestImplementation deps.testing.test_ext_truth
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.espresso.intents
    androidTestImplementation deps.espresso.accessibility
    androidTestImplementation deps.espresso.web
    androidTestImplementation deps.espresso.idling_resource
    androidTestImplementation deps.espresso.idling_concurrent

  //  androidTestImplementation deps.navigation.testing_ktx


    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'deps.support.annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'deps.support.annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    testImplementation(deps.arch_core.testing, {
        exclude group: 'com.android.support', module: 'deps.support.app_compat'
        exclude group: 'com.android.support', module: 'deps.support.annotations'
        exclude group: 'com.android.support', module: 'deps.support.core_utils'
    })
    androidTestImplementation(deps.arch_core.testing, {
    })
    androidTestImplementation deps.dexmaker
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

repositories {
    google()
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}